/* eslint-disable */

/**
 * Various bindings to libantimony.
 * IMPORTANT: If a function is called before libantimony is loaded an error will be thrown!
 *
 * Reference available here: https://antimony.sourceforge.net/antimony__api_8h.html
 */

/** Emscripten module for libantimony. Used globally. */
let libantimony: any;

/** Loads libantimony and assigns the loaded module to the global variable. */
const initLoad = async () => {
  libantimony = await libantimony();
};

/** Check libantimony has loaded and throw if not. */
const checkLoaded = () => {
  if (!libantimony) {
    throw new Error("libantimony not yet loaded");
  }
};

/** Convenience function for creating a binding to libanimtony. */
const createBinding = <TReturn, TParams extends any[]>(
  name: string,
  returnType: string,
  paramTypes: string[],
): ((...params: TParams) => TReturn) => {
  let binding: (...params: TParams) => TReturn;
  return (...params: TParams): TReturn => {
    checkLoaded();
    if (!binding) {
      binding = libantimony.cwrap(name, returnType, paramTypes);
    }

    return binding(...params);
  };
};

// GENERATED BY CHATGPT
/*
 * Prompt:
 * convert this:
 * ```js
 *     this.loadString = module.cwrap('loadString', 'number', ['number']);
 *     this.loadAntimonyString = module.cwrap('loadAntimonyString', 'number', ['number']);
 *     this.loadSBMLString = module.cwrap('loadSBMLString', 'number', ['number']);
 *     this.getSBMLString = module.cwrap('getSBMLString', 'string', ['null']);
 *     this.getAntimonyString = module.cwrap('getAntimonyString', 'string', ['null']);
 *     this.getCompSBMLString = module.cwrap('getCompSBMLString', 'string', ['string']);
 *     this.clearPreviousLoads = module.cwrap('clearPreviousLoads', 'null', ['null']);
 *     this.getLastError = module.cwrap('getLastError', 'string', ['null']);
 *     this.getWarnings = module.cwrap('getWarnings', 'string', ['null']);
 *     this.getSBMLInfoMessages = module.cwrap('getSBMLInfoMessages', 'string', ['string']);
 *     this.getSBMLWarnings = module.cwrap('getSBMLWarnings', 'string', ['string']);
 *     this.freeAll = module.cwrap('freeAll', 'null', ['null']);
 *     // Emscripten funcs (direct calls):
 *     this.jsFree = (strPtr) => module._free(strPtr);
 *     this.jsAllocateUTF8 = (newStr) =>  module.allocateUTF8(newStr);
 *     // Do not need?:
 *     this.jsUTF8ToString = (strPtr) => module.UTF8ToString(strPtr);}
 * ```
 * to this format:
 * ```ts
 * /** doc comments
 * export const name = createBinding(name, ret, params);
 * ```
 * api reference here: https://antimony.sourceforge.net/antimony__api_8h.html
 */

/**
 * Loads a string of any format libAntimony knows about.
 * @param modelPtr Pointer to the model string in memory.
 * @returns A number status code.
 */
export const loadString = createBinding<number, [number]>(
  "loadString",
  "number",
  ["number"],
);

/**
 * Loads an Antimony string.
 * @param modelPtr Pointer to the Antimony model string.
 * @returns A number status code.
 */
export const loadAntimonyString = createBinding<number, [number]>(
  "loadAntimonyString",
  "number",
  ["number"],
);

/**
 * Loads an SBML string.
 * @param modelPtr Pointer to the SBML model string.
 * @returns A number status code.
 */
export const loadSBMLString = createBinding<number, [number]>(
  "loadSBMLString",
  "number",
  ["number"],
);

/**
 * Gets the SBML string for the main module.
 * @returns The SBML string.
 */
export const getSBMLString = createBinding<string, []>(
  "getSBMLString",
  "string",
  ["null"],
);

/**
 * Gets the Antimony string for the main module.
 * @returns The Antimony string.
 */
export const getAntimonyString = createBinding<string, []>(
  "getAntimonyString",
  "string",
  ["null"],
);

/**
 * Gets the SBML string with composition for a specific module.
 * @param moduleName The module name string.
 * @returns The composite SBML string.
 */
export const getCompSBMLString = createBinding<string, [string]>(
  "getCompSBMLString",
  "string",
  ["string"],
);

/**
 * Clears previously loaded models from memory.
 */
export const clearPreviousLoads = createBinding<void, []>(
  "clearPreviousLoads",
  "null",
  ["null"],
);

/**
 * Gets the last error message.
 * @returns A string describing the last error.
 */
export const getLastError = createBinding<string, []>(
  "getLastError",
  "string",
  ["null"],
);

/**
 * Gets warning messages from the last load operation.
 * @returns Warning messages as a string.
 */
export const getWarnings = createBinding<string, []>("getWarnings", "string", [
  "null",
]);

/**
 * Gets SBML info messages for a specific module.
 * @param moduleName The name of the module.
 * @returns Info messages as a string.
 */
export const getSBMLInfoMessages = createBinding<string, [string]>(
  "getSBMLInfoMessages",
  "string",
  ["string"],
);

/**
 * Gets SBML warning messages for a specific module.
 * @param moduleName The name of the module.
 * @returns Warning messages as a string.
 */
export const getSBMLWarnings = createBinding<string, [string | null]>(
  "getSBMLWarnings",
  "string",
  ["string"],
);

/**
 * Frees all internal memory allocations.
 */
export const freeAll = createBinding<void, []>("freeAll", "null", ["null"]);

/**
 * Frees a previously allocated memory block.
 * @param strPtr Pointer to the memory to free.
 */
export const jsFree = createBinding<void, [number]>("free", "null", ["number"]);

/**
 * Allocates memory for a UTF-8 encoded string.
 * @param newStr The string to encode and allocate.
 * @returns A pointer to the allocated memory.
 */
export const jsAllocateUTF8 = createBinding<number, [string]>(
  "allocateUTF8",
  "number",
  ["string"],
);

// This will run asynchronously. Using this interesting feature: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void.
void initLoad();
